{"ast":null,"code":"var _jsxFileName = \"C:\\\\C\\xF3digos\\\\siteHealth2\\\\web\\\\src\\\\App.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport './global.css'; // Componente: função que retorna um html,css ou JS. Não afeta o layout, nem os anuncios, nem o chat.\n//      ex: time line do FB, cada um dos posts é um componente. ex: App, sempre maiúsculo\n//      um componente por arquivo, sempre que usar html dentro do JS importar o react\n//      componente é um bloco isolado de HTML, CSS e JS, o qual não interfe no resto da aplicação\n// Estado: Informações mantidas pela componente (Lembrar: imutabilidade)\n// Propriedade: informações que um componente PAI passa para o componente FILHO\n//      não precisa ser apenas string, pode ser variável, func ...(objetos ?)\n//import Header from './Header';\n\n/*function App2() {      //html dentro do javaScript\n  const [counter, setCounter] = useState(1); //pode ser var\n\n  function incrementCounter(){//como é uma funcao do componente, fica dentro do mesmo\n  \n     setCounter(counter +1);\n     \n  }\n  \n  return (\n  <div>\n     <h1>Contador: {counter}</h1>\n     <button onClick = {incrementCounter} >IncreaseHealth</button>\n\n    </div>\n  //por critérios de organização, div pode ser apagado\n  );\n  \n}\n*/\n\n/*strong=negrito\nse for usar uma classe usar className, pois class é palavra reservada\nsimilarmente hmtlFor, for é reservada.\n*/\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"aside\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 1\n    }\n  }, \"Cadastrar\"), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 3\n    }\n  }, \" htmlFor = \\\"Nome\\\"> Nome \"))), /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 1\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Códigos/siteHealth2/web/src/App.js"],"names":["React","useState","App"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,WAAP;AACA,OAAO,cAAP,C,CAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;AAKA,SAASC,GAAT,GAAc;AACZ,sBACE;AAAK,IAAA,EAAE,EAAE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADF,CAFA,CADI,eAQJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARI,CADF;AAgBD;;AACD,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport './global.css';\n\n// Componente: função que retorna um html,css ou JS. Não afeta o layout, nem os anuncios, nem o chat.\n//      ex: time line do FB, cada um dos posts é um componente. ex: App, sempre maiúsculo\n//      um componente por arquivo, sempre que usar html dentro do JS importar o react\n//      componente é um bloco isolado de HTML, CSS e JS, o qual não interfe no resto da aplicação\n\n// Estado: Informações mantidas pela componente (Lembrar: imutabilidade)\n\n// Propriedade: informações que um componente PAI passa para o componente FILHO\n//      não precisa ser apenas string, pode ser variável, func ...(objetos ?)\n\n//import Header from './Header';\n\n/*function App2() {      //html dentro do javaScript\n  const [counter, setCounter] = useState(1); //pode ser var\n\n  function incrementCounter(){//como é uma funcao do componente, fica dentro do mesmo\n  \n     setCounter(counter +1);\n     \n  }\n  \n  return (\n  <div>\n     <h1>Contador: {counter}</h1>\n     <button onClick = {incrementCounter} >IncreaseHealth</button>\n\n    </div>\n  //por critérios de organização, div pode ser apagado\n  );\n  \n}\n*/\n\n/*strong=negrito\nse for usar uma classe usar className, pois class é palavra reservada\nsimilarmente hmtlFor, for é reservada.\n*/\n\nfunction App(){\n  return (\n    <div id =\"app\">\n<aside>\n<strong>Cadastrar</strong>   \n<form>\n  <label> htmlFor = \"Nome\"> Nome </label>\n</form>\n</aside>\n\n<main>\n\n</main>\n\n    </div>\n\n  );\n}\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}